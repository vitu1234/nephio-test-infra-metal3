---
- name: Install cert-manager
  command: kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/{{ CERT_MANAGER_VERSION }}/cert-manager.yaml
  register: cert_manager_install
  changed_when: "'created' in cert_manager_install.stdout"

- name: Wait for cert-manager to be ready
  shell: |
    kubectl wait --for=condition=Available --timeout=300s -n cert-manager deployment/cert-manager \
    && kubectl wait --for=condition=Available --timeout=300s -n cert-manager deployment/cert-manager-webhook \
    && kubectl wait --for=condition=Available --timeout=300s -n cert-manager deployment/cert-manager-cainjector
  register: cert_manager_wait
  changed_when: false

- name: Remove Old meta3 files if exists
  file:
    path: "{{ item }}"
    state: absent
  loop:
  - "ironic/*"
  - "disk-images/*"
  - "bmo/*"

- name: Ensure ironic directory exists
  ansible.builtin.file:
    path: "ironic"
    state: directory
    mode: '0700'

- name: download and install kustomize
  become: yes
  become_method: sudo
  command: snap install kustomize --classic

- name: Ensure the disk-images directory exists
  ansible.builtin.file:
    path: "disk-images"
    state: directory
    mode: '0700'

- name: Ensure the ironic directory exists
  ansible.builtin.file:
    path: "ironic"
    state: directory
    mode: '0700'

- name: bmo directory exists
  ansible.builtin.file:
    path: "bmo"
    state: directory
    mode: '0700'

# tasks file for DHCP server
- name: Create and populate the dnsmasq.env file
  ansible.builtin.copy:
    dest: "dnsmasq.env"
    content: |
      # The same HTTP port must be provided to all containers!
      HTTP_PORT={{ HTTP_PORT }}
      # Specify the MAC addresses (separated by ;) of the hosts we know about and want to use
      DHCP_HOSTS={{ DHCP_HOSTS }}
      # Ignore unknown hosts so we don't accidentally give out IP addresses to other hosts in the network
      DHCP_IGNORE={{ DHCP_IGNORE }}
      # Listen on this IP (management computer)
      PROVISIONING_IP={{ PROVISIONING_IP }}
      # Give out IP addresses in this range
      DHCP_RANGE={{ DHCP_RANGE }}
      GATEWAY_IP={{ GATEWAY_IP }}
    mode: '0600'

# image server
- name: Get image filename from URL
  set_fact:
    image_filename: "{{ IMG_URL | basename }}"

- name: Download Cloud Image
  get_url:
    url: "{{ IMG_URL }}"
    dest: "disk-images/{{ image_filename }}"
    mode: '0644'

- name: Run dnsmasq container for Metal3
  docker_container:
    name: dnsmasq
    image: quay.io/metal3-io/ironic
    state: started
    restart_policy: unless-stopped
    network_mode: host
    privileged: yes
    user: "997:994"
    env_file: "dnsmasq.env"
    command: /bin/rundnsmasq

- name: Run image-server container with Nginx
  docker_container:
    name: image-server
    image: nginxinc/nginx-unprivileged
    state: started
    ports:
    - "80:8080"
    volumes:
    - "disk-images:/usr/share/nginx/html"
    restart_policy: unless-stopped

# configure Ironic
- name: Create and populate the ironic-auth-config file
  ansible.builtin.copy:
    dest: "ironic/ironic-auth-config"
    content: |
      [ironic]
      auth_type=http_basic
      username={{ IRONIC_USERNAME }}
      password={{ IRONIC_PASSWORD }}
    mode: '0600'

- name: Create and populate the ironic-inspector-auth-config file
  ansible.builtin.copy:
    dest: "ironic/ironic-inspector-auth-config"
    content: |
      [inspector]
      auth_type=http_basic
      username={{ INSPECTOR_USERNAME }}
      password={{ INSPECTOR_PASSWORD }}
    mode: '0600'

- name: Create and populate the ironic-htpasswd file
  ansible.builtin.copy:
    dest: "ironic/ironic-htpasswd"
    content: |
      IRONIC_HTPASSWD="<output of `htpasswd -n -b -B IRONIC_USERNAME IRONIC_PASSWORD`>"
    mode: '0600'

- name: Create and populate the ironic-inspector-htpasswd file
  ansible.builtin.copy:
    dest: "ironic/ironic-inspector-htpasswd"
    content: |
      INSPECTOR_HTPASSWD="<output of `htpasswd -n -b -B INSPECTOR_USERNAME INSPECTOR_PASSWORD`>"
    mode: '0600'

- name: Create and populate the ironic_bmo.env file
  ansible.builtin.copy:
    dest: "ironic/ironic_bmo.env"
    content: |
      # Same port as exposed in kind.yaml
      HTTP_PORT={{ HTTP_PORT }}
      # This is the interface inside the container
      PROVISIONING_INTERFACE={{ PROVISIONING_INTERFACE }}
      # URL where the http server is exposed (IP of management computer)
      CACHEURL={{ PROVISIONING_IP }}
      IRONIC_KERNEL_PARAMS={{ IRONIC_KERNEL_PARAMS }}
      # IP where the BMCs can access Ironic to get the virtualmedia boot image.
      # This is the IP of the management computer in the out of band network.
      IRONIC_EXTERNAL_IP={{ PROVISIONING_IP }}
      # URLs where the servers can callback during inspection.
      # IP of management computer in the other network and same ports as in kind.yaml
      IRONIC_EXTERNAL_CALLBACK_URL=https://{{ PROVISIONING_IP }}:{{ IRONIC_EXTERNAL_CALLBACK_URL_PORT}}
      IRONIC_INSPECTOR_CALLBACK_ENDPOINT_OVERRIDE=https://{{ PROVISIONING_IP }}:{{ IRONIC_INSPECTOR_CALLBACK_ENDPOINT_OVERRIDE_PORT }}
    mode: '0600'

- name: Create and populate the ironic-patch.yaml file
  ansible.builtin.copy:
    dest: "ironic/ironic-patch.yaml"
    content: |
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: ironic
      spec:
        template:
          spec:
            containers:
            - name: ironic-dnsmasq
              $patch: delete
    mode: '0600'

- name: Create and populate the metal3 kustomization file
  ansible.builtin.copy:
    dest: "ironic/kustomization.yaml"
    content: |
      apiVersion: kustomize.config.k8s.io/v1beta1
      kind: Kustomization
      namespace: baremetal-operator-system
      resources:
      - https://github.com/metal3-io/baremetal-operator/config/namespace?ref=v0.5.1
      - https://github.com/metal3-io/baremetal-operator/ironic-deployment/base?ref=v0.5.1
      components:
      - https://github.com/metal3-io/baremetal-operator/ironic-deployment/components/basic-auth?ref=v0.5.1
      - https://github.com/metal3-io/baremetal-operator/ironic-deployment/components/tls?ref=v0.5.1
      images:
      - name: quay.io/metal3-io/ironic
        newTag: v24.0.0
      configMapGenerator:
      - envs:
        - ironic_bmo.env
        name: ironic-bmo-configmap
        behavior: create
      patches:
      - path: ironic-patch.yaml
      - patch: |-
          - op: replace
            path: /spec/ipAddresses/0
            value: {{ PROVISIONING_IP }}
        target:
          kind: Certificate
          name: ironic-cert|ironic-inspector-cert
      - patch: |-
          - op: remove
            path: /spec/ipAddresses
        target:
          kind: Certificate
          name: ironic-cacert
      secretGenerator:
      - name: ironic-htpasswd
        behavior: create
        envs:
        - ironic-htpasswd
      - name: ironic-inspector-htpasswd
        behavior: create
        envs:
        - ironic-inspector-htpasswd
      - name: ironic-auth-config
        files:
        - auth-config=ironic-auth-config
      - name: ironic-inspector-auth-config
        files:
        - auth-config=ironic-inspector-auth-config
    mode: '0600'

# - name: Generate Kustomization YAML
#   become: yes
#   become_method: sudo
#   command: cp kustomization-ironic.yaml.j2 ironic/kustomization.yaml

- name: Check the manifests with ironic kustomize
  become: yes
  become_method: sudo
  command: kubectl create -k ironic --dry-run=client -o yaml

- name: Apply Ironic manifests kustomize
  become: yes
  become_method: sudo
  command: kubectl apply -k ironic

# Deploy Bare Metal Operator
- name: Create and populate the bmo-ironic-username file
  ansible.builtin.copy:
    dest: "bmo/ironic-username"
    content: |
      {{ IRONIC_USERNAME }}
    mode: '0600'

- name: Create and populate the bmo-ironic-password file
  ansible.builtin.copy:
    dest: "bmo/ironic-password"
    content: |
      {{ IRONIC_PASSWORD }}
    mode: '0600'

- name: Create and populate the bmo-ironic-inspector-username file
  ansible.builtin.copy:
    dest: "bmo/ironic-inspector-username"
    content: |
      {{ INSPECTOR_USERNAME }}
    mode: '0600'

- name: Create and populate the bmo-ironic-inspector-password file
  ansible.builtin.copy:
    dest: "bmo/ironic-inspector-password"
    content: |
      {{ INSPECTOR_PASSWORD }}
    mode: '0600'

- name: Create and populate the bmo-ironic.env file
  ansible.builtin.copy:
    dest: "bmo/ironic.env"
    content: |
      DEPLOY_KERNEL_URL=http://{{ PROVISIONING_IP }}:{{ HTTP_PORT }}/images/ironic-python-agent.kernel
      DEPLOY_RAMDISK_URL=http://{{ PROVISIONING_IP }}:{{ HTTP_PORT }}/images/ironic-python-agent.initramfs
      IRONIC_ENDPOINT=https://{{ PROVISIONING_IP }}:{{ IRONIC_EXTERNAL_CALLBACK_URL_PORT }}/v1/
    mode: '0600'

- name: Create and populate the bmo-kustomization.yaml file
  ansible.builtin.copy:
    dest: "bmo/kustomization.yaml"
    content: |
      apiVersion: kustomize.config.k8s.io/v1beta1
      kind: Kustomization
      namespace: baremetal-operator-system
      resources:
      - https://github.com/metal3-io/baremetal-operator/config/overlays/basic-auth_tls?ref=v0.5.1
      images:
      - name: quay.io/metal3-io/baremetal-operator
        newTag: v0.5.1
      configMapGenerator:
      - name: ironic
        behavior: create
        envs:
        - ironic.env
      generatorOptions:
        disableNameSuffixHash: true
      secretGenerator:
      - name: ironic-credentials
        files:
        - username=ironic-username
        - password=ironic-password
      - name: ironic-inspector-credentials
        files:
        - username=ironic-inspector-username
        - password=ironic-inspector-password
    mode: '0600'

- name: Check the manifests with bmo kustomize
  become: yes
  become_method: sudo
  shell: kubectl create -k bmo --dry-run=client -o yaml

- name: Apply bmo kustomize manifests
  become: yes
  become_method: sudo
  shell: kubectl apply -k bmo

- name: Download clusterctl binary
  become: yes
  become_method: sudo
  get_url:
    url: https://github.com/kubernetes-sigs/cluster-api/releases/download/{{ clusterctl_version }}/clusterctl-linux-amd64
    dest: /tmp/clusterctl-linux-amd64
    mode: '0755'

- name: Move clusterctl binary to /usr/local/bin
  become: yes
  become_method: sudo
  command: mv /tmp/clusterctl-linux-amd64 /usr/local/bin/clusterctl

- name: Initialize management cluster
  become: yes
  become_method: sudo
  shell: clusterctl init --infrastructure metal3

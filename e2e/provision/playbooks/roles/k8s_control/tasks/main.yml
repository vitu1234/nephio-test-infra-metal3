---
# tasks file for roles/k8s_control

- name: Make users passwordless for sudo
  lineinfile:
    path: /etc/sudoers
    state: present
    line: 'ubuntu ALL=(ALL) NOPASSWD: ALL'
    validate: 'visudo -cf %s'
#k8s key is invalid sometimes, better remove and add a new one
- name: remove old k8s key
  ansible.builtin.shell:
    cmd: sudo rm /etc/apt/sources.list.d/kubernetes.list
    # Run with a specific shell to ensure compatibility
    executable: /bin/bash


- name: add Kubernetes apt-key
  get_url:
    url: https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key
    dest: /etc/apt/keyrings/kubernetes-apt-keyring.asc
    mode: '0644'
    force: true

- name: add Kubernetes' APT repository
  apt_repository:
    repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.asc] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /"
    state: present
    update_cache: yes


- name: apt update
  ansible.builtin.shell:
    cmd: sudo apt update
    # Run with a specific shell to ensure compatibility
    executable: /bin/bash

- name: Install yq via snap
  ansible.builtin.shell:
    cmd: sudo snap install yq
    # Run with a specific shell to ensure compatibility
    executable: /bin/bash



- name: Install Unzip
  ansible.builtin.shell:
    cmd: sudo apt install unzip -y
    # Run with a specific shell to ensure compatibility
    executable: /bin/bash


# - name: disable SWAP (Kubeadm requirement)
#   shell: |
#     swapoff -a

# - name: disable SWAP in fstab (Kubeadm requirement)
#   replace:
#     path: /etc/fstab
#     regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
#     replace: '# \1'

# - name: create an empty file for the Containerd module
#   copy:
#     content: ""
#     dest: /etc/modules-load.d/containerd.conf
#     force: no

# - name: configure modules for Containerd
#   blockinfile:
#     path: /etc/modules-load.d/containerd.conf
#     block: |
#           overlay
#           br_netfilter

# - name: create an empty file for Kubernetes sysctl params
#   copy:
#     content: ""
#     dest: /etc/sysctl.d/99-kubernetes-cri.conf
#     force: no

# - name: configure sysctl params for Kubernetes
#   lineinfile:
#     path: /etc/sysctl.d/99-kubernetes-cri.conf
#     line: "{{ item }}"
#   with_items:
#     - 'net.bridge.bridge-nf-call-iptables  = 1'
#     - 'net.ipv4.ip_forward                 = 1'
#     - 'net.bridge.bridge-nf-call-ip6tables = 1'

# - name: apply sysctl params without reboot
#   command: sysctl --system

- name: install APT Transport HTTPS
  apt:
    name: apt-transport-https
    state: present

- name: add Docker apt-key
  get_url:
    url: https://download.docker.com/linux/ubuntu/gpg
    dest: /etc/apt/keyrings/docker-apt-keyring.asc
    mode: '0644'
    force: true
- name: Gather facts
  setup:

- name: add Docker's APT repository
  apt_repository:
    repo: "deb [arch={{ 'amd64' if ansible_architecture == 'x86_64' else 'arm64' }} signed-by=/etc/apt/keyrings/docker-apt-keyring.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    state: present
    update_cache: yes

# - name: add Kubernetes apt-key
#   get_url:
#     url: https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key
#     dest: /etc/apt/keyrings/kubernetes-apt-keyring.asc
#     mode: '0644'
#     force: true

# - name: add Kubernetes' APT repository
#   apt_repository:
#     repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.asc] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /"
#     state: present
#     update_cache: yes

# - name: install Containerd
#   apt:
#     name: containerd.io
#     state: present

# - name: create Containerd directory
#   file:
#     path: /etc/containerd
#     state: directory

# - name: add Containerd configuration
#   shell: /usr/bin/containerd config default > /etc/containerd/config.toml

# - name: configuring the systemd cgroup driver for Containerd
#   lineinfile:
#     path: /etc/containerd/config.toml
#     regexp: '            SystemdCgroup = false'
#     line: '            SystemdCgroup = true'

# - name: enable the Containerd service and start it
#   systemd:
#     name: containerd
#     state: restarted
#     enabled: yes
#     daemon-reload: yes

# - name: install Kubelet
#   apt:
#     name: kubelet=1.29.*
#     state: present
#     update_cache: true

# - name: install Kubeadm
#   apt:
#     name: kubeadm=1.29.*
#     state: present

# - name: enable the Kubelet service, and enable it persistently
#   service:
#     name: kubelet
#     enabled: yes

# - name: load br_netfilter kernel module
#   community.general.modprobe:
#     name: br_netfilter
#     state: present

# - name: set bridge-nf-call-iptables
#   ansible.posix.sysctl:
#     name: net.bridge.bridge-nf-call-iptables
#     value: 1

# - name: set ip_forward
#   ansible.posix.sysctl:
#     name: net.ipv4.ip_forward
#     value: 1

# - name: Pulling the images of k8s control node
#   command: kubeadm config images pull


- name: Initializing k8s cluster
  command: kubeadm init

- name: Setting up kubectl on control Node
  shell:
    cmd: |
      mkdir -p $HOME/.kube
      sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
      sudo chown $(id -u):$(id -g) $HOME/.kube/config
# - name: Deploying Flannel on Master Node
#   command: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml

- name: Run kubectl config current-context
  command: kubectl config current-context
  register: contexts_name

- name: Save current context to a variable
  set_fact:
    original_current_context: "{{ contexts_name.stdout }}"

- name: Display the current context name
  debug:
    msg: "Current Original context name is: {{ original_current_context }}"

- name: Extract context after '@'
  set_fact:
    context_name: "{{ original_current_context | regex_replace('.*@', '') }}"

- name: Display extracted context name
  debug:
    msg: "Context name after '@' is: {{ context_name }}"    

- name: Rename current context name
  command: kubectl config rename-context {{ original_current_context }} {{ context_name }} 



- name: Get the latest Cilium CLI version
  shell: curl -s https://raw.githubusercontent.com/cilium/cilium-cli/main/stable.txt
  register: cilium_cli_version

- name: Determine CLI architecture
  set_fact:
    cli_arch: "{{ 'arm64' if ansible_architecture == 'aarch64' else 'amd64' }}"

- name: Download Cilium CLI and checksum files
  shell: |
    curl -L --fail --remote-name-all https://github.com/cilium/cilium-cli/releases/download/{{ cilium_cli_version.stdout }}/cilium-linux-{{ cli_arch }}.tar.gz{,.sha256sum}
  args:
    chdir: /tmp

- name: Verify checksum
  shell: sha256sum --check cilium-linux-{{ cli_arch }}.tar.gz.sha256sum
  args:
    chdir: /tmp

- name: Extract Cilium CLI and move to /usr/local/bin
  shell: sudo tar xzvfC /tmp/cilium-linux-{{ cli_arch }}.tar.gz /usr/local/bin
  args:
    chdir: /tmp

- name: Clean up downloaded cilium files
  file:
    path: /tmp/cilium-linux-{{ cli_arch }}.tar.gz{{ item }}
    state: absent
  loop:
    - ''
    - '.sha256sum'    


- name: Run Cilium Installation on master node
  command: cilium install --set cluster.name={{ context_name }} --set cluster.id=1 --context {{ context_name }}


- name: Creating token for Slave
  command: kubeadm token create  --print-join-command
  register: token

- name: Cleaning Caches on RAM
  shell: echo 3 > /proc/sys/vm/drop_caches

- name: Install Docker packages
  apt:
    name: 
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose
    state: present
  
- name: Add user to docker group
  user:
    name: "ubuntu"
    groups: docker
    append: yes

- name: Set permissions on docker socket
  file:
    path: "/var/run/docker.sock"
    mode: "0666"
    owner: "root"
    group: "docker"
